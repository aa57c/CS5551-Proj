# -*- coding: utf-8 -*-
"""boardgame-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13YES805xlCBRtoSNGum4qAt-kYHqujDQ
"""

import random

# Initialize an empty game board
board = [" " for _ in range(24)]
current_player = "X"

# Define the winning combinations for the game
winning_combinations = [
    [0, 1, 2], [3, 4, 5], [6, 7, 8],
    [9, 10, 11], [12, 13, 14], [15, 16, 17],
    [18, 19, 20], [21, 22, 23],
    [0, 9, 18], [1, 10, 19], [2, 11, 20],
    [3, 12, 21], [4, 13, 22], [5, 14, 23],
    [0, 3, 6], [1, 4, 7], [2, 5, 8]
]

# Function to print the game board
def print_board():
    print(" 7-----8-----9")
    print("| {}---{}---{} |".format(board[7], board[8], board[9]))
    print("| | 4---5---6 | |")
    print("| | | {}-{}-{} | | |".format(board[4], board[5], board[6]))
    print("0-1-2   10-11-12-13-14  3")
    print("| | | {}-{}-{} | | |".format(board[3], board[12], board[13]))
    print("| | 16-15-14 | |")
    print("| {}---{}---{} |".format(board[0], board[23], board[22]))
    print("21-----20-----19")

print_board()

# Function to start a new game
def start_new_game():
    global board
    board = [" " for _ in range(24)]
    print("New game started.")
    print_board()

start_new_game()

# Function to handle a system error
def handle_system_error():
    print("System error. Unable to start a new game. Please try again.")

# Function to handle starting a new game during a game in progress
def start_new_game_during_game():
    response = input("A game is already in progress. Do you want to abandon it and start a new game? (y/n): ")
    if response.lower() == 'y':
        start_new_game()

# Function to handle insufficient system resources
def handle_insufficient_resources():
    print("Insufficient system resources to start a new game.")
    print("Please close other applications or reboot the device.")

def is_game_over():
    for combo in winning_combinations:
        if board[combo[0]] == board[combo[1]] == board[combo[2]] != " ":
            return True
    return False

def exit_game():
    print("Exiting the game.")
    quit()

def confirm_exit():
    if is_game_over() or all(cell == " " for cell in board):
        exit_game()
    else:
        response = input("Exiting now will result in the loss of unsaved progress. Are you sure you want to exit? (y/n): ")
        if response.lower() == 'y':
            exit_game()

# Simulate starting a new game
def simulate_game():
    while True:
        option = input("Select an option:\n1. Start New Game\n2. Simulate System Error\n3. Simulate Game in Progress\n4. Simulate Insufficient Resources\n5. Quit\nChoice: ")
        if option == '1':
            start_new_game()
        elif option == '2':
            handle_system_error()
        elif option == '3':
            start_new_game_during_game()
        elif option == '4':
            handle_insufficient_resources()
        elif option =='5':
            confirm_exit()

        elif option == '6':
            print("Goodbye!")
            break
        else:
            print("Invalid choice. Please select a valid option.")

if __name__ == "__main__":
    simulate_game()



